var grain = require('grain');

var funPattern = /@([a-z$_][a-z0-9$_]*(?:\.[a-z$_][a-z0-9$_]*)*)\(([^\)]*)\)/i;
var varPattern = /@([a-z$_][a-z0-9$_]*(?:\.[a-z$_][a-z0-9$_]*)*)/i;

module.exports = function (template, locals, callback) {
  var parts = [];
  var match;
  var index = 0;
  while (match = funPattern.exec(template.substr(index))) {
    var line = template.substr(index, match.index);
    if (line) parts.push(addPlain(line));
    parts.push('execute(' + parts.length + ', ' + match[1] + (match[2] ? ', [' + match[2] + ']' : '') + ');');
    index += match.index + match[0].length;
  }
  var line = template.substr(index);
  if (line) parts.push(addPlain(line));

  // Add on header and footer to the generated code.
  parts.unshift('chunks = new Array(' + parts.length + ');');
  parts.push('check();');
  
  // Generate the code using the grain helper
  eval(grain(parts));

  // Do a little currying for the user
  return locals ? compile(locals, callback) : compile;
  
  // compile the sync parts of the template into a static string concat
  function addPlain(line) {
    var lineParts = [];
    var match;
    var index = 0;
    while (match = varPattern.exec(line.substr(index))) {
      var plain = line.substr(index, match.index);
      if (plain) lineParts.push(JSON.stringify(plain));
      lineParts.push('(' + match[1] + ')');
      index += match.index + match[0].length;
    }
    var plain = line.substr(index);
    if (plain) lineParts.push(JSON.stringify(plain));
    return 'chunks[' + parts.length + '] = (' + lineParts.join(" + ") + ');';
  }
}

